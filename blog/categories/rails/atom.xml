<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | JQ Engineer Blog]]></title>
  <link href="http://jq-corp.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jq-corp.github.io/"/>
  <updated>2015-08-07T10:07:59+09:00</updated>
  <id>http://jq-corp.github.io/</id>
  <author>
    <name><![CDATA[JQ Co., Ltd.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactとRailsの関係性とサンプルアプリケーションのまとめ]]></title>
    <link href="http://jq-corp.github.io/blog/2015/07/30/react-rails/"/>
    <updated>2015-07-30T09:47:25+09:00</updated>
    <id>http://jq-corp.github.io/blog/2015/07/30/react-rails</id>
    <content type="html"><![CDATA[<ul>
<li>RailsのフロントエンドのJSフレームワーク(ライブラリ)として最近話題の<code>ReactJS</code>を採用することを考える</li>
<li>その際、ReactとRailsとの関係性にいくつかのパターンがありえるので、そのパターンを紹介したいと思います</li>
<li>ポイントは、どこまでReactとRailsを密接に関係させるか</li>
<li>大きくは、次の3つのパターンに分けられます

<ul>
<li>1.RailsのViewの中にReactを埋め込む方法</li>
<li>2.Railsプロジェクトの中にReactのフロントエンドアプリを埋め込む方法</li>
<li>3.Rails APIとReactのフロントエンドアプリを別々にする方法</li>
</ul>
</li>
<li>以下では、少し詳しくこれらのパターンを見ていきます</li>
<li>どれが良いとかいうのは、それぞれのPros&amp;Consがあるので、一概には言えないと思いますが、そのプロジェクトのニーズに合わせて適切な選択をしていくんだと思います</li>
<li>他にもこういうパターンがあるとか、間違ってるとかあれば、ぜひご指摘お願いいたします</li>
</ul>


<h2>1.RailsのViewの中にReactを埋め込む方法</h2>

<ul>
<li><code>react-rails</code>というgemが公開されているので、これを使うのが良い</li>
<li><p><code>react-rails</code>がやっていることは主に次の通り</p>

<ul>
<li>asset-pipelineの中で<code>.js.jsx</code>を変換してくれる</li>
<li>Viewの中で、<code>react_component</code>ヘルパーを用いて、Reactのコンポーネントをレンダリングしてくれる</li>
<li><code>prerender: true</code>オプションを付ければ、サーバーサイドレンダリングも実行可能(<em>1-2参照</em>)</li>
</ul>
</li>
<li><p>この場合、Railsの<code>asset_pipeline</code>を用いて、ReactのJS(JSX)ファイルも一緒にコンパイルされる</p>

<ul>
<li>さらに、<code>sprockets-coffee-react</code>を使えば、CoffeeScriptを使ってReactを書くなんてこともできる</li>
</ul>
</li>
</ul>


<p><a href="https://github.com/reactjs/react-rails">reactjs/react-rails · GitHub</a></p>

<h3>1-1.React -> Rails</h3>

<ul>
<li>RailsでレンダリングしたViewの中で、Reactが実行される</li>
<li>ReactからのAjaxリクエストによって、Railsから取得したjsonを用いて、Virtual DOMを組み立てる</li>
<li>普通に考えるとこれがもっともシンプルに記述できると思います</li>
</ul>


<h4>sample app</h4>

<p><a href="https://github.com/bigardone/rails_and_react">bigardone/rails_and_react · GitHub</a></p>

<h3>1-2.Rails -> React : サーバーサイドレンダリング</h3>

<ul>
<li>RailsでレンダリングするViewの中に、jsonを埋め込んで、サーバーサイドでJSを実行して初期表示をすることが可能</li>
<li>いわゆるサーバーサイドレンダリングというやつで、これを使えば、初期のロード時間を短縮し、SEOにも対応できます</li>
</ul>


<h4>sample app</h4>

<p><a href="https://github.com/bensmithett/sample-react-rails-app">bensmithett/sample-react-rails-app · GitHub</a></p>

<h3>1-3. Rails + React + Flux</h3>

<ul>
<li><code>react-rails</code>をベースにしているが、Railsプロジェクト内にFluxアーキテクチャを取り入れた例</li>
<li>このサンプルでは、Flux実装に<code>alt</code>を採用</li>
<li>asset管理は、<code>rails-assets</code>を利用</li>
</ul>


<h4>sample app</h4>

<p><a href="https://github.com/zhubert/react-flux-rails-demo">zhubert/react-flux-rails-demo</a></p>

<p><a href="https://github.com/goatslacker/alt">goatslacker/alt</a></p>

<h2>2.Railsプロジェクトの中にReactのフロントエンドアプリを埋め込む方法</h2>

<h3>2-1. Rails + React</h3>

<ul>
<li>Railsの<code>asset-pipeline</code>の仕組みを使わずに、フロントエンドアプリケーションを構築

<ul>
<li>当然<code>react-rails</code>は、使わない</li>
<li>Reactのassetsは、<code>webpack</code>などを使ってコンパイル</li>
</ul>
</li>
<li>ただし、Railsプロジェクト内に<code>client</code>ディレクトリなどを切って管理される</li>
<li>アプリケーションとしては、分離されているものの、プロジェクトとしては1つに収めることができるので、3.よりも多少開発はしやすいか</li>
<li>npmモジュールを使ったり、ES6で記述できたりするので便利だけど、フロントエンドの開発環境をセットアップするのが大変</li>
<li>そして、フロントエンド、サーバーサイド両方のサーバーを起動する必要がある</li>
</ul>


<h4>sample app</h4>

<p><a href="https://github.com/justin808/react-webpack-rails-tutorial">justin808/react-webpack-rails-tutorial · GitHub</a></p>

<h2>3.Rails APIとReactのフロントエンドアプリを別々にする方法</h2>

<ul>
<li>RailsはAPIに徹し、jsonを返すだけにとどめる</li>
<li>Reactで、ルーティングやViewのレンダリングを担当する</li>
<li>この場合、Reactは、Fluxアーキテクチャと共に用いるのが良いと思う</li>
<li>サーバーサイドレンダリングを考えないなら、フロントとサーバーを明確に分離できる</li>
<li>完全に別のプロジェクトとして動ける反面、開発のオーバーヘッドは高くなる(2.同様別サーバー立てて開発したり。)</li>
<li>APIベースのアプリケーション全般に言えるが、別途以下の事を考慮する必要がでてくる

<ul>
<li>API認証(Tokenベース/Cookieベース)</li>
<li>CORS</li>
</ul>
</li>
</ul>


<h4>sample app</h4>

<p><a href="https://github.com/FancyPixel/small-frontend">FancyPixel/small-frontend · GitHub</a></p>

<p><a href="http://fancypixel.github.io/blog/2015/01/28/react-plus-flux-backed-by-rails-api/">React + Flux backed by Rails API - Part 1 | Fancy Pixel</a></p>

<p><a href="http://fancypixel.github.io/blog/2015/01/29/react-plus-flux-backed-by-rails-api-part-2/">React + Flux backed by Rails API - Part 2 | Fancy Pixel</a></p>

<p><a href="http://fancypixel.github.io/blog/2015/01/30/react-plus-flux-backed-by-rails-api-part-3/">React + Flux backed by Rails API - Part 3 | Fancy Pixel</a></p>

<h2>Refs.</h2>

<ul>
<li>この素晴らしい記事を読んだらそれでおしまいなのですが、サンプルアプリとセットで整理してみたいと思い、記事にしました。</li>
<li>他にも、react + railsのサンプルアプリがあれば、ぜひご紹介ください。</li>
</ul>


<p><a href="http://www.openmindedinnovations.com/blogs/3-ways-to-integrate-ruby-on-rails-react-flux">3 ways to integrate Ruby on Rails + React + Flux | Open Minded Innovations</a></p>

<p><a href="https://speakerdeck.com/hokaccha/react-rails-1">react-rails // Speaker Deck</a></p>

<p><a href="http://rny.io/rails/react/2014/07/31/reactjs-and-rails.html">React and Rails</a></p>
]]></content>
  </entry>
  
</feed>
